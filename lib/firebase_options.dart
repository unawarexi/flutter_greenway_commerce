// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:greenway_commerce/core/config/environments.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web => FirebaseOptions(
        apiKey: Environment.firebaseWebApiKey,
        appId: Environment.firebaseWebAppId,
        messagingSenderId: Environment.firebaseWebMessagingSenderId,
        projectId: Environment.firebaseWebProjectId,
        authDomain: Environment.firebaseWebAuthDomain,
        databaseURL: Environment.firebaseWebDatabaseUrl,
        storageBucket: Environment.firebaseWebStorageBucket,
        measurementId: Environment.firebaseWebMeasurementId,
      );

  static FirebaseOptions get android => FirebaseOptions(
        apiKey: Environment.firebaseAndroidApiKey,
        appId: Environment.firebaseAndroidAppId,
        messagingSenderId: Environment.firebaseAndroidMessagingSenderId,
        projectId: Environment.firebaseAndroidProjectId,
        databaseURL: Environment.firebaseAndroidDatabaseUrl,
        storageBucket: Environment.firebaseAndroidStorageBucket,
      );

  static FirebaseOptions get ios => FirebaseOptions(
        apiKey: Environment.firebaseIosApiKey,
        appId: Environment.firebaseIosAppId,
        messagingSenderId: Environment.firebaseIosMessagingSenderId,
        projectId: Environment.firebaseIosProjectId,
        databaseURL: Environment.firebaseIosDatabaseUrl,
        storageBucket: Environment.firebaseIosStorageBucket,
        iosClientId: Environment.firebaseIosIosClientId,
        iosBundleId: Environment.firebaseIosBundleId,
      );

  static FirebaseOptions get macos => FirebaseOptions(
        apiKey: Environment.firebaseMacosApiKey,
        appId: Environment.firebaseMacosAppId,
        messagingSenderId: Environment.firebaseMacosMessagingSenderId,
        projectId: Environment.firebaseMacosProjectId,
        databaseURL: Environment.firebaseMacosDatabaseUrl,
        storageBucket: Environment.firebaseMacosStorageBucket,
        iosClientId: Environment.firebaseMacosIosClientId,
        iosBundleId: Environment.firebaseMacosBundleId,
      );

  static FirebaseOptions get windows => FirebaseOptions(
        apiKey: Environment.firebaseWindowsApiKey,
        appId: Environment.firebaseWindowsAppId,
        messagingSenderId: Environment.firebaseWindowsMessagingSenderId,
        projectId: Environment.firebaseWindowsProjectId,
        authDomain: Environment.firebaseWindowsAuthDomain,
        databaseURL: Environment.firebaseWindowsDatabaseUrl,
        storageBucket: Environment.firebaseWindowsStorageBucket,
        measurementId: Environment.firebaseWindowsMeasurementId,
      );
}
